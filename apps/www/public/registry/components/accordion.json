{
  "name": "accordion",
  "dependencies": ["@radix-ui/react-accordion"],
  "files": [
    {
      "name": "accordion.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { CheckIcon, ChevronDownIcon, Link2Icon } from \"@radix-ui/react-icons\";\nimport { cn } from \"@/utils/cn\";\nimport { Button } from \"./button\";\n\nconst AccordionRoot = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root>\n>(({ className, orientation, ...props }, ref) => (\n  <AccordionPrimitive.Root\n    ref={ref}\n    className={cn(\n      orientation === \"horizontal\" ? \"flex flex-row\" : \"\",\n      className,\n    )}\n    orientation={orientation}\n    {...props}\n  />\n));\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"data-[orientation=vertical]:border-b\",\n      \"data-[orientation=horizontal]:flex data-[orientation=horizontal]:border-r\",\n      className,\n    )}\n    {...props}\n  />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\n    hideChevron?: boolean;\n    chevronPosition?: \"left\" | \"right\";\n    chevronRotation?: \"full\" | \"half\";\n    before?: React.ReactNode;\n    after?: React.ReactNode;\n  }\n>(\n  (\n    {\n      className,\n      children,\n      hideChevron = false,\n      chevronPosition,\n      chevronRotation = \"full\",\n      before = null,\n      after = null,\n      ...props\n    },\n    ref,\n  ) => (\n    <AccordionPrimitive.Header className=\"flex !m-0 !text-current items-center\">\n      {before}\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          \"group/accordion flex flex-1 items-center justify-between gap-4 py-4 text-sm font-medium transition-all\",\n          chevronPosition === \"left\"\n            ? \"flex-row-reverse data-[orientation=horizontal]:flex-col-reverse\"\n            : \"flex-row data-[orientation=horizontal]:flex-col\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {!hideChevron && (\n          <ChevronDownIcon\n            className={cn(\n              \"chevron h-4 w-4 shrink-0 text-current transition-transform duration-200\",\n              chevronRotation === \"full\"\n                ? \"rotate-0 group-data-[state=open]/accordion:rotate-180\"\n                : \"-rotate-90 group-data-[state=open]/accordion:rotate-0\",\n            )}\n          />\n        )}\n      </AccordionPrimitive.Trigger>\n      {after}\n    </AccordionPrimitive.Header>\n  ),\n);\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"overflow-hidden text-sm\",\n      \"data-[state=closed]:data-[orientation=vertical]:animate-accordion-up data-[state=open]:data-[orientation=vertical]:animate-accordion-down\",\n      \"data-[state=closed]:data-[orientation=horizontal]:animate-accordion-left data-[state=open]:data-[orientation=horizontal]:animate-accordion-right\",\n    )}\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport const AccordionsVariants = cva(cn(\"w-full rounded-lg\"), {\n  variants: {\n    variant: {\n      default: cn(),\n      primary: cn(),\n      none: cn(\"border-none rounded-none\"),\n    },\n    theme: {\n      default: cn(\"border\"),\n      primary: cn(\"text-primary-foreground\"),\n      secondary: cn(\"border text-foreground\"),\n      tertiary: cn(\"border-none text-primary-foreground\"),\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    theme: \"default\",\n  },\n});\n\nexport const AccordionVariants = cva(\n  cn(\n    \"w-full border-b last-of-type:border-none first-of-type:rounded-t-lg last-of-type:rounded-b-lg transition-colors\",\n  ),\n  {\n    variants: {\n      variant: {\n        default: cn(),\n        primary: cn(),\n        none: cn(\n          \"border-none rounded-none first-of-type:rounded-none last-of-type:rounded-none\",\n        ),\n      },\n      theme: {\n        default: cn(\"bg-none text-foreground\"),\n        primary: cn(\"bg-primary hover:bg-primary/85 text-primary-foreground\"),\n        secondary: cn(\n          \"bg-secondary/55 hover:bg-secondary text-secondary-foreground\",\n        ),\n        tertiary: cn(\"bg-none hover:bg-accent/75 border-none text-foreground\"),\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      theme: \"default\",\n    },\n  },\n);\n\n\nconst Accordions = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & {\n    \n    variant?: VariantProps<typeof AccordionsVariants>[\"variant\"];\n    \n    theme?: VariantProps<typeof AccordionsVariants>[\"theme\"];\n    \n    showCopyButton?: boolean;\n  }\n>(\n  (\n    {\n      className,\n      type = \"single\",\n      variant = \"default\",\n      theme = \"default\",\n      showCopyButton = false,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const newClildren = React.Children.map(children, (child) => {\n      if (React.isValidElement(child)) {\n        \n        return React.cloneElement(child, { variant, theme, showCopyButton });\n      }\n      return child;\n    });\n\n    return (\n      \n      <AccordionRoot\n        ref={ref}\n        type={type}\n        collapsible={type === \"single\" ? true : undefined}\n        className={cn(AccordionsVariants({ variant, theme }), className)}\n        data-variant={variant}\n        data-theme={theme}\n        {...props}\n      >\n        {newClildren}\n      </AccordionRoot>\n    );\n  },\n);\nAccordions.displayName = \"Accordions\";\n\n\nconst Accordion = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>,\n    \"value\"\n  > & {\n    \n    variant?: VariantProps<typeof AccordionVariants>[\"variant\"];\n    theme?: VariantProps<typeof AccordionVariants>[\"theme\"];\n    showCopyButton?: boolean;\n    \n    copyText?: string;\n    \n    TClassName?: string;\n    \n    CClassName?: string;\n    \n    trigger: React.ReactNode;\n    \n    id: string;\n  }\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      theme = \"default\",\n      showCopyButton = false,\n      copyText,\n      TClassName,\n      CClassName,\n      trigger,\n      id,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <AccordionItem\n        ref={ref}\n        className={cn(AccordionVariants({ variant, theme }), className)}\n        value={id}\n        data-variant={variant}\n        data-theme={theme}\n        {...props}\n      >\n        <AccordionTrigger\n          id={id}\n          className={cn(\"px-4 py-0\", TClassName)}\n          chevronPosition={\n            [\"primary\"].includes(variant || \"\") ? \"left\" : \"right\"\n          }\n          chevronRotation={\n            [\"primary\"].includes(variant || \"\") ? \"half\" : \"full\"\n          }\n          data-variant={variant}\n          data-theme={theme}\n          after={showCopyButton && <CopyButton id={id} copyText={copyText} />}\n        >\n          {trigger}\n        </AccordionTrigger>\n        <AccordionContent\n          className={cn(\"px-4\", CClassName)}\n          data-variant={variant}\n          data-theme={theme}\n          children={children}\n        />\n      </AccordionItem>\n    );\n  },\n);\nAccordion.displayName = \"Accordion\";\n\nfunction CopyButton({ id, copyText }: { id: string; copyText?: string }) {\n  const [checked, setChecked] = React.useState(false);\n  const timeoutRef = React.useRef<number | null>(null);\n\n  const onCopy: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(\n    (e) => {\n      e.stopPropagation();\n\n      const url = new URL(window.location.href);\n      url.hash = id;\n\n      navigator.clipboard.writeText(copyText || url.toString());\n    },\n    [],\n  );\n\n  const onClick: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(\n    (e) => {\n      if (timeoutRef.current) window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(() => {\n        setChecked(false);\n      }, 1500);\n      onCopy(e);\n      setChecked(true);\n    },\n    [onCopy],\n  );\n\n  \n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) window.clearTimeout(timeoutRef.current);\n    };\n  }, []);\n\n  return (\n    <Button\n      variant={\"tertiary\"}\n      className={cn(\n        \"text-current hover:opacity-70 hover:bg-transparet transition-all\",\n      )}\n      onClick={onClick}\n    >\n      {checked ? (\n        <CheckIcon className=\"size-4\" />\n      ) : (\n        <Link2Icon className=\"size-4\" />\n      )}\n    </Button>\n  );\n}\n\nexport {\n  AccordionRoot,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n  Accordions,\n  Accordion,\n};\n"
    }
  ],
  "type": "components:ui",
  "subcategory": ["button"]
}
