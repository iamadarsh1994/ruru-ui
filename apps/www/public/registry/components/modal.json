{
  "name": "modal",
  "files": [
    {
      "name": "modal.tsx",
      "content": "\"use client\";\n\nimport React, {\n  useState,\n  useContext,\n  useCallback,\n  ReactNode,\n  createContext,\n  useEffect,\n} from \"react\";\nimport {\n  AnimatePresence,\n  ForwardRefComponent,\n  HTMLMotionProps,\n  motion,\n} from \"framer-motion\";\nimport { cn } from \"@/utils/cn\";\nimport { Button, ButtonProps } from \"./button\";\n\n\nexport interface ModalContextProps {\n  \n  isOpen: boolean;\n  \n  openModal: () => void;\n  \n  closeModal: () => void;\n}\n\n\nexport interface ModalProps\n  extends Partial<ForwardRefComponent<HTMLDivElement, HTMLMotionProps<\"div\">>> {\n  \n  children: ReactNode;\n  \n  onClickOutside?: () => void;\n  \n  animationVariant?: keyof typeof modalVariants;\n}\n\n\nexport interface ModalActionProps extends ButtonProps {\n  \n  fullWidth?: boolean;\n  \n  onClick?: () => void | Promise<void>;\n}\n\n\nexport interface TriggerProps extends ButtonProps {\n  \n  children: ReactNode;\n  \n  onClick?: () => void;\n  \n  asChild?: boolean;\n}\n\n\nexport interface DivProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {}\n\n\nexport interface PTagProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLParagraphElement>,\n    HTMLParagraphElement\n  > {}\n\n\nexport const modalVariants = {\n  default: {\n    hidden: {\n      opacity: 0,\n      y: -50,\n      rotateX: \"0deg\",\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      y: 0,\n      rotateX: \"0deg\",\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      y: -50,\n      rotateX: \"-10deg\",\n      transition: { duration: 0.15 },\n    },\n  },\n  fade: {\n    hidden: {\n      opacity: 0,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      transition: { duration: 0.15 },\n    },\n  },\n  zoom: {\n    hidden: {\n      opacity: 0,\n      scale: 0.8,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.8,\n      transition: { duration: 0.15 },\n    },\n  },\n  scaleBounce: {\n    hidden: {\n      opacity: 0,\n      scale: 0.8,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      scale: [1.1, 1],\n      transition: { duration: 0.3 },\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.8,\n      transition: { duration: 0.15 },\n    },\n  },\n  slideUp: {\n    hidden: {\n      opacity: 0,\n      y: 100,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      y: 100,\n      transition: { duration: 0.15 },\n    },\n  },\n  slideDown: {\n    hidden: {\n      opacity: 0,\n      y: -100,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      y: -100,\n      transition: { duration: 0.15 },\n    },\n  },\n  slideRight: {\n    hidden: {\n      opacity: 0,\n      x: 100,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      x: 100,\n      transition: { duration: 0.15 },\n    },\n  },\n  slideLeft: {\n    hidden: {\n      opacity: 0,\n      x: -100,\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      x: -100,\n      transition: { duration: 0.15 },\n    },\n  },\n  flip: {\n    hidden: {\n      opacity: 0,\n      rotateY: \"90deg\",\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      rotateY: \"0deg\",\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      rotateY: \"90deg\",\n      transition: { duration: 0.15 },\n    },\n  },\n  rotate: {\n    hidden: {\n      opacity: 0,\n      rotate: \"90deg\",\n      transition: { duration: 0.15 },\n    },\n    visible: {\n      opacity: 1,\n      rotate: \"0deg\",\n      transition: { duration: 0.15 },\n    },\n    exit: {\n      opacity: 0,\n      rotate: \"90deg\",\n      transition: { duration: 0.15 },\n    },\n  },\n};\n\n\nconst ModalContext = createContext<ModalContextProps | undefined>(undefined);\n\n\nexport const ModalProvider = ({\n  children,\n}: {\n  children: ReactNode;\n}): React.ReactElement => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const openModal = useCallback(() => setIsOpen(true), []);\n  const closeModal = useCallback(() => setIsOpen(false), []);\n\n  return (\n    <ModalContext.Provider value={{ isOpen, openModal, closeModal }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\n\nexport const useModal = (): ModalContextProps => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n\n\nconst Modal = ({\n  children,\n  onClickOutside,\n  animationVariant = \"default\",\n  ...props\n}: ModalProps): React.ReactElement => {\n  const { isOpen, closeModal } = useModal();\n\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        closeModal();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape);\n    } else {\n      document.removeEventListener(\"keydown\", handleEscape);\n    }\n\n    return () => document.removeEventListener(\"keydown\", handleEscape);\n  }, [isOpen, closeModal]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed w-full h-full bg-[rgba(0,0,0,0.5)] flex justify-center items-center z-[999] left-0 top-0\"\n          onClick={onClickOutside ? onClickOutside : closeModal}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          {...props}\n        >\n          <motion.div\n            className=\"bg-background border w-full max-w-[500px] shadow-[0_2px_10px_rgba(0,0,0,0.1)] rounded-lg\"\n            onClick={(e) => e.stopPropagation()}\n            variants={modalVariants[animationVariant]}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n          >\n            {children}\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\n\nconst ModalTrigger = ({\n  children,\n  onClick,\n  asChild = false,\n  ...props\n}: TriggerProps): React.ReactElement => {\n  const { openModal } = useModal();\n\n  const handleClick = () => {\n    openModal();\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  if (asChild) {\n    return (\n      <div onClick={handleClick} className=\"cursor-pointer\">\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <Button onClick={handleClick} {...props}>\n      {children}\n    </Button>\n  );\n};\n\nModal.Trigger = ModalTrigger;\nModalTrigger.displayName = \"Modal.Trigger\";\n\n\nconst ModalBody = ({ children, ...props }: DivProps): React.ReactElement => (\n  <div className=\"mb-5\" {...props}>\n    {children}\n  </div>\n);\n\nModal.Body = ModalBody;\nModalBody.displayName = \"Modal.Body\";\n\n\nconst ModalHeader = ({\n  children,\n  className,\n  ...props\n}: DivProps): React.ReactElement => (\n  <div className={cn(\"mb-4 p-3 border-b\", className)} {...props}>\n    {children}\n  </div>\n);\n\nModal.Header = ModalHeader;\nModalHeader.displayName = \"Modal.Header\";\n\n\nconst ModalTitle = ({\n  children,\n  className,\n  ...props\n}: PTagProps): React.ReactElement => (\n  <p className={cn(\"text-2xl\", className)} {...props}>\n    {children}\n  </p>\n);\n\nModal.Title = ModalTitle;\nModalTitle.displayName = \"Modal.Title\";\n\n\nconst ModalContent = ({\n  children,\n  className,\n  ...props\n}: DivProps): React.ReactElement => (\n  <div className={cn(\"p-3\", className)} {...props}>\n    {children}\n  </div>\n);\n\nModal.Content = ModalContent;\nModalContent.displayName = \"Modal.Content\";\n\n\nconst ModalSubtitle = ({\n  children,\n  className,\n  ...props\n}: DivProps): React.ReactElement => (\n  <p className={cn(\"text-sm text-muted-foreground mt-2\", className)} {...props}>\n    {children}\n  </p>\n);\n\nModal.Subtitle = ModalSubtitle;\nModalSubtitle.displayName = \"Modal.Subtitle\";\n\n\nconst ModalActions = ({\n  children,\n  className,\n  ...props\n}: DivProps): React.ReactElement => (\n  <div\n    className={cn(\n      \"bg-card border-t p-3 flex justify-between gap-2.5 rounded-br-[10px] rounded-bl-[10px] w-full\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nModal.Actions = ModalActions;\nModalActions.displayName = \"Modal.Actions\";\n\n\nconst ModalAction = ({\n  fullWidth = false,\n  onClick,\n  className,\n  ...props\n}: ModalActionProps): React.ReactElement => {\n  const { closeModal } = useModal();\n\n  const handleClick = async () => {\n    if (onClick) {\n      await onClick();\n    }\n    closeModal();\n  };\n\n  return (\n    <Button\n      className={cn(\"text-base\", className, fullWidth && \"w-full\")}\n      onClick={handleClick}\n      {...props}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nModal.Action = ModalAction;\nModalAction.displayName = \"Modal.Action\";\n\n\nconst ModalClose = (props: ModalActionProps): React.ReactElement => (\n  <Modal.Action {...props} onClick={useModal().closeModal}>\n    {props.children}\n  </Modal.Action>\n);\n\nModal.Close = ModalClose;\nModalClose.displayName = \"Modal.Close\";\n\nexport default Modal;\n"
    }
  ],
  "type": "components:ui",
  "subcategory": ["button"]
}
