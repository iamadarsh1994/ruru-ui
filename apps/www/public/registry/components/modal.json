{
  "name": "modal",
  "files": [
    {
      "name": "modal.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  useState,\r\n  useContext,\r\n  useCallback,\r\n  ReactNode,\r\n  createContext,\r\n  useEffect,\r\n} from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  ForwardRefComponent,\r\n  HTMLMotionProps,\r\n  motion,\r\n} from \"framer-motion\";\r\nimport { cn } from \"@/utils/cn\";\r\nimport { Button, ButtonProps } from \"./button\";\r\n\r\n\r\nexport interface ModalContextProps {\r\n  \r\n  isOpen: boolean;\r\n  \r\n  openModal: () => void;\r\n  \r\n  closeModal: () => void;\r\n}\r\n\r\n\r\nexport interface ModalProps\r\n  extends Partial<ForwardRefComponent<HTMLDivElement, HTMLMotionProps<\"div\">>> {\r\n  \r\n  children: ReactNode;\r\n  \r\n  onClickOutside?: () => void;\r\n  \r\n  animationVariant?: keyof typeof modalVariants;\r\n}\r\n\r\n\r\nexport interface ModalActionProps extends ButtonProps {\r\n  \r\n  fullWidth?: boolean;\r\n  \r\n  onClick?: () => void | Promise<void>;\r\n}\r\n\r\n\r\nexport interface TriggerProps extends ButtonProps {\r\n  \r\n  children: ReactNode;\r\n  \r\n  onClick?: () => void;\r\n  \r\n  asChild?: boolean;\r\n}\r\n\r\n\r\nexport interface DivProps\r\n  extends React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLDivElement>,\r\n    HTMLDivElement\r\n  > {}\r\n\r\n\r\nexport interface PTagProps\r\n  extends React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLParagraphElement>,\r\n    HTMLParagraphElement\r\n  > {}\r\n\r\n\r\nexport const modalVariants = {\r\n  default: {\r\n    hidden: {\r\n      opacity: 0,\r\n      y: -50,\r\n      rotateX: \"0deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      rotateX: \"0deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: -50,\r\n      rotateX: \"-10deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  fade: {\r\n    hidden: {\r\n      opacity: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  zoom: {\r\n    hidden: {\r\n      opacity: 0,\r\n      scale: 0.8,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      scale: 1,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      scale: 0.8,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  scaleBounce: {\r\n    hidden: {\r\n      opacity: 0,\r\n      scale: 0.8,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      scale: [1.1, 1],\r\n      transition: { duration: 0.3 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      scale: 0.8,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  slideUp: {\r\n    hidden: {\r\n      opacity: 0,\r\n      y: 100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: 100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  slideDown: {\r\n    hidden: {\r\n      opacity: 0,\r\n      y: -100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: -100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  slideRight: {\r\n    hidden: {\r\n      opacity: 0,\r\n      x: 100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      x: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      x: 100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  slideLeft: {\r\n    hidden: {\r\n      opacity: 0,\r\n      x: -100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      x: 0,\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      x: -100,\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  flip: {\r\n    hidden: {\r\n      opacity: 0,\r\n      rotateY: \"90deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      rotateY: \"0deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      rotateY: \"90deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n  rotate: {\r\n    hidden: {\r\n      opacity: 0,\r\n      rotate: \"90deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      rotate: \"0deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      rotate: \"90deg\",\r\n      transition: { duration: 0.15 },\r\n    },\r\n  },\r\n};\r\n\r\n\r\nconst ModalContext = createContext<ModalContextProps | undefined>(undefined);\r\n\r\n\r\nexport const ModalProvider = ({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}): React.ReactElement => {\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n  const openModal = useCallback(() => setIsOpen(true), []);\r\n  const closeModal = useCallback(() => setIsOpen(false), []);\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ isOpen, openModal, closeModal }}>\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\n\r\nexport const useModal = (): ModalContextProps => {\r\n  const context = useContext(ModalContext);\r\n  if (!context) {\r\n    throw new Error(\"useModal must be used within a ModalProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\n\r\nconst Modal = ({\r\n  children,\r\n  onClickOutside,\r\n  animationVariant = \"default\",\r\n  ...props\r\n}: ModalProps): React.ReactElement => {\r\n  const { isOpen, closeModal } = useModal();\r\n\r\n  useEffect(() => {\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === \"Escape\") {\r\n        closeModal();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"keydown\", handleEscape);\r\n    } else {\r\n      document.removeEventListener(\"keydown\", handleEscape);\r\n    }\r\n\r\n    return () => document.removeEventListener(\"keydown\", handleEscape);\r\n  }, [isOpen, closeModal]);\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      {isOpen && (\r\n        <motion.div\r\n          className=\"fixed w-full h-full bg-[rgba(0,0,0,0.5)] flex justify-center items-center z-[999] left-0 top-0\"\r\n          onClick={onClickOutside ? onClickOutside : closeModal}\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          {...props}\r\n        >\r\n          <motion.div\r\n            className=\"bg-background border w-full max-w-[500px] shadow-[0_2px_10px_rgba(0,0,0,0.1)] rounded-lg\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            variants={modalVariants[animationVariant]}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"exit\"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\n\r\nconst ModalTrigger = ({\r\n  children,\r\n  onClick,\r\n  asChild = false,\r\n  ...props\r\n}: TriggerProps): React.ReactElement => {\r\n  const { openModal } = useModal();\r\n\r\n  const handleClick = () => {\r\n    openModal();\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  if (asChild) {\r\n    return (\r\n      <div onClick={handleClick} className=\"cursor-pointer\">\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button onClick={handleClick} {...props}>\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nModal.Trigger = ModalTrigger;\r\nModalTrigger.displayName = \"Modal.Trigger\";\r\n\r\n\r\nconst ModalBody = ({ children, ...props }: DivProps): React.ReactElement => (\r\n  <div className=\"mb-5\" {...props}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nModal.Body = ModalBody;\r\nModalBody.displayName = \"Modal.Body\";\r\n\r\n\r\nconst ModalHeader = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: DivProps): React.ReactElement => (\r\n  <div className={cn(\"mb-4 p-3 border-b\", className)} {...props}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nModal.Header = ModalHeader;\r\nModalHeader.displayName = \"Modal.Header\";\r\n\r\n\r\nconst ModalTitle = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: PTagProps): React.ReactElement => (\r\n  <p className={cn(\"text-2xl\", className)} {...props}>\r\n    {children}\r\n  </p>\r\n);\r\n\r\nModal.Title = ModalTitle;\r\nModalTitle.displayName = \"Modal.Title\";\r\n\r\n\r\nconst ModalContent = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: DivProps): React.ReactElement => (\r\n  <div className={cn(\"p-3\", className)} {...props}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nModal.Content = ModalContent;\r\nModalContent.displayName = \"Modal.Content\";\r\n\r\n\r\nconst ModalSubtitle = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: DivProps): React.ReactElement => (\r\n  <p className={cn(\"text-sm text-muted-foreground mt-2\", className)} {...props}>\r\n    {children}\r\n  </p>\r\n);\r\n\r\nModal.Subtitle = ModalSubtitle;\r\nModalSubtitle.displayName = \"Modal.Subtitle\";\r\n\r\n\r\nconst ModalActions = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: DivProps): React.ReactElement => (\r\n  <div\r\n    className={cn(\r\n      \"bg-card border-t p-3 flex justify-between gap-2.5 rounded-br-[10px] rounded-bl-[10px] w-full\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nModal.Actions = ModalActions;\r\nModalActions.displayName = \"Modal.Actions\";\r\n\r\n\r\nconst ModalAction = ({\r\n  fullWidth = false,\r\n  onClick,\r\n  className,\r\n  ...props\r\n}: ModalActionProps): React.ReactElement => {\r\n  const { closeModal } = useModal();\r\n\r\n  const handleClick = async () => {\r\n    if (onClick) {\r\n      await onClick();\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      className={cn(\"text-base\", className, fullWidth && \"w-full\")}\r\n      onClick={handleClick}\r\n      {...props}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nModal.Action = ModalAction;\r\nModalAction.displayName = \"Modal.Action\";\r\n\r\n\r\nconst ModalClose = (props: ModalActionProps): React.ReactElement => (\r\n  <Modal.Action {...props} onClick={useModal().closeModal}>\r\n    {props.children}\r\n  </Modal.Action>\r\n);\r\n\r\nModal.Close = ModalClose;\r\nModalClose.displayName = \"Modal.Close\";\r\n\r\nexport default Modal;\r\n"
    }
  ],
  "type": "components:ui",
  "subcategory": ["button"]
}
