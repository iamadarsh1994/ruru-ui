{
  "name": "stack",
  "files": [
    {
      "name": "stack.tsx",
      "content": "\"use client\";\n\nimport React, { ReactNode, CSSProperties, useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\n\ntype Direction = \"row\" | \"column\";\ntype Align = \"start\" | \"center\" | \"end\" | \"stretch\" | \"baseline\";\ntype Justify =\n  | \"start\"\n  | \"center\"\n  | \"end\"\n  | \"space-between\"\n  | \"space-around\"\n  | \"space-evenly\";\ntype Wrap = \"nowrap\" | \"wrap\" | \"wrap-reverse\";\ntype Visibility = \"visible\" | \"hidden\" | \"collapse\";\n\ntype Spacing =\n  | number\n  | string\n  | {\n      l?: number | string;\n      r?: number | string;\n      t?: number | string;\n      b?: number | string;\n    };\ntype Responsive<T> = T | { sm?: T; md?: T; lg?: T; xl?: T };\n\n\ninterface StackProps {\n  \n  children?: ReactNode;\n\n  \n  direction?: Responsive<Direction>;\n\n  \n  gap?: Responsive<number>;\n\n  \n  align?: Responsive<Align>;\n\n  \n  justify?: Responsive<Justify>;\n\n  \n  wrap?: Responsive<Wrap>;\n\n  \n  grow?: number;\n\n  \n  padding?: Responsive<Spacing>;\n\n  \n  margin?: Responsive<Spacing>;\n\n  \n  width?: Responsive<number | string>;\n\n  \n  height?: Responsive<number | string>;\n\n  \n  border?: string;\n\n  \n  borderRadius?: string | number;\n\n  \n  backgroundColor?: string;\n\n  \n  maxWidth?: string | number;\n\n  \n  maxHeight?: string | number;\n\n  \n  alignContent?: Responsive<\n    \"start\" | \"center\" | \"end\" | \"stretch\" | \"space-between\" | \"space-around\"\n  >;\n\n  \n  zIndex?: number;\n\n  \n  visibility?: Responsive<Visibility>;\n\n  \n  className?: string;\n\n  \n  style?: CSSProperties;\n}\n\nconst getResponsiveValue = <T,>(\n  value: Responsive<T> | undefined,\n  defaultValue: T,\n): T => {\n  if (typeof value !== \"object\" || value === null) return value ?? defaultValue;\n  if (typeof window === \"undefined\") return defaultValue;\n\n  const width = window.innerWidth;\n  if (width >= 1280 && (value as { xl?: T }).xl !== undefined)\n    return (value as { xl?: T }).xl as T;\n  if (width >= 1024 && (value as { lg?: T }).lg !== undefined)\n    return (value as { lg?: T }).lg as T;\n  if (width >= 768 && (value as { md?: T }).md !== undefined)\n    return (value as { md?: T }).md as T;\n  if ((value as { sm?: T }).sm !== undefined)\n    return (value as { sm?: T }).sm as T;\n\n  return defaultValue;\n};\n\nconst parseSpacing = (value: Spacing) => {\n  if (typeof value === \"object\") {\n    return {\n      paddingLeft: value.l ?? 0,\n      paddingRight: value.r ?? 0,\n      paddingTop: value.t ?? 0,\n      paddingBottom: value.b ?? 0,\n    };\n  }\n  return { padding: value };\n};\n\n\nexport const Stack: React.FC<StackProps> = ({\n  children,\n  direction,\n  gap,\n  align,\n  justify,\n  wrap,\n  grow,\n  padding,\n  margin,\n  width,\n  height,\n  border,\n  borderRadius,\n  backgroundColor,\n  maxWidth,\n  maxHeight,\n  alignContent,\n  zIndex,\n  visibility,\n  className = \"\",\n  style = {},\n}) => {\n  const [responsiveStyles, setResponsiveStyles] = useState<CSSProperties>({});\n\n  useEffect(() => {\n    const updateStyles = () => {\n      const newStyles: CSSProperties = {\n        display: \"flex\",\n      };\n\n      if (direction)\n        newStyles.flexDirection = getResponsiveValue(direction, \"row\");\n      if (gap !== undefined) newStyles.gap = `${getResponsiveValue(gap, 0)}px`;\n      if (align) newStyles.alignItems = getResponsiveValue(align, \"stretch\");\n      if (justify)\n        newStyles.justifyContent = getResponsiveValue(justify, \"start\");\n      if (wrap) newStyles.flexWrap = getResponsiveValue(wrap, \"nowrap\");\n      if (grow !== undefined) newStyles.flexGrow = grow;\n\n      if (padding !== undefined) {\n        const resolvedPadding = parseSpacing(getResponsiveValue(padding, 0));\n        Object.assign(newStyles, resolvedPadding);\n      }\n\n      if (margin !== undefined) {\n        const resolvedMargin = parseSpacing(getResponsiveValue(margin, 0));\n        Object.assign(newStyles, resolvedMargin);\n      }\n\n      if (width) newStyles.width = getResponsiveValue(width, \"auto\");\n      if (height) newStyles.height = getResponsiveValue(height, \"auto\");\n      if (visibility)\n        newStyles.visibility = getResponsiveValue(visibility, \"visible\");\n      if (border) newStyles.border = border;\n      if (borderRadius) newStyles.borderRadius = borderRadius;\n      if (backgroundColor) newStyles.backgroundColor = backgroundColor;\n      if (maxWidth) newStyles.maxWidth = maxWidth;\n      if (maxHeight) newStyles.maxHeight = maxHeight;\n      if (alignContent)\n        newStyles.alignContent = getResponsiveValue(alignContent, \"stretch\");\n      if (zIndex !== undefined) newStyles.zIndex = zIndex;\n\n      setResponsiveStyles(newStyles);\n    };\n\n    updateStyles();\n    window.addEventListener(\"resize\", updateStyles);\n    return () => window.removeEventListener(\"resize\", updateStyles);\n  }, [\n    direction,\n    gap,\n    align,\n    justify,\n    wrap,\n    padding,\n    margin,\n    width,\n    height,\n    visibility,\n    border,\n    borderRadius,\n    backgroundColor,\n    maxWidth,\n    maxHeight,\n    alignContent,\n    zIndex,\n  ]);\n\n  return (\n    <div className={clsx(className)} style={{ ...responsiveStyles, ...style }}>\n      {children}\n    </div>\n  );\n};\n"
    }
  ],
  "type": "components:ui"
}
